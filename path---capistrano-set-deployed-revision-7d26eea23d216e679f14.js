webpackJsonp([0x859052ab4fd4],{856:function(e,t){e.exports={data:{post:{id:"/home/runner/work/blog/blog/content/posts/2016-01-03--capistrano_set_deployed_revision/index.md absPath of file >>> MarkdownRemark",html:'<p>We use Capistrano to deploy our Rails application. Recently i upgraded our capistrano version from 2 to 3</p>\n<p>Capistrano 3 has a complete DSL changeover. Apart from this one other major change I figured out was the way a Git repository is been deployed.</p>\n<p>Previously a Git repository is cloned in the deploy location. Now in Cap 3 a Git archive is been downloaded to the deploy location. This means the deploy directory is no more a Git repository. During Cap 2 times, we used to run a ‘git log’ command in the deployed driectory to find the deployed revision. Now after upgrade I am unable to do this.</p>\n<p>Cap 3 has got a REVISION file, which contain the SHA of the deployed commit. This wasn’t useful in our case, as we show this message in our web application.</p>\n<p>So i ended up writing a Cap task using a similar logic to create a REVISION file with our custom formatted Git message.</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">namespace :deploy do\n  task :add\\_revision\\_file do\n    on roles(:app) do\n      within repo\\_path do\n        execute(:git, :&#39;log&#39;, :&quot;--pretty=format:&#39;%h | %ai | %d %s&#39;&quot;, :&#39;-1&#39;,\n        :&quot;#{fetch(:branch)}&quot;, &quot;&gt;#{release\\_path}/REVISION&quot;)\n      end\n    end\n  end\nend\n\n\nafter &#39;deploy:updating&#39;, &#39;deploy:add\\_revision\\_file&#39;</code></pre>\n      </div>\n<p>This will overwrite the REVISION file created by Cap with our custom message. Which will be consumed by our application.</p>',htmlAst:{type:"root",children:[{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"We use Capistrano to deploy our Rails application. Recently i upgraded our capistrano version from 2 to 3"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Capistrano 3 has a complete DSL changeover. Apart from this one other major change I figured out was the way a Git repository is been deployed."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Previously a Git repository is cloned in the deploy location. Now in Cap 3 a Git archive is been downloaded to the deploy location. This means the deploy directory is no more a Git repository. During Cap 2 times, we used to run a ‘git log’ command in the deployed driectory to find the deployed revision. Now after upgrade I am unable to do this."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Cap 3 has got a REVISION file, which contain the SHA of the deployed commit. This wasn’t useful in our case, as we show this message in our web application."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"So i ended up writing a Cap task using a similar logic to create a REVISION file with our custom formatted Git message."}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"text"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-text"]},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"namespace :deploy do\n  task :add\\_revision\\_file do\n    on roles(:app) do\n      within repo\\_path do\n        execute(:git, :'log', :\"--pretty=format:'%h | %ai | %d %s'\", :'-1',\n        :\"#{fetch(:branch)}\", \">#{release\\_path}/REVISION\")\n      end\n    end\n  end\nend\n\n\nafter 'deploy:updating', 'deploy:add\\_revision\\_file'"}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"This will overwrite the REVISION file created by Cap with our custom message. Which will be consumed by our application."}]}],data:{quirksMode:!1}},fields:{slug:"/capistrano_set_deployed_revision/",prefix:"2016-01-03"},frontmatter:{title:"Set deployed Git revision using Capistrano 3",subTitle:"While deploying Rails application using Capistrano 3, recording the current deployed git revision to be used by Rails applicaiton.",draft:null}},author:{id:"/home/runner/work/blog/blog/content/parts/author.md absPath of file >>> MarkdownRemark",html:"<p><strong>Prasanna</strong> is a full stack web developer, with loads of experience in architecting and coding enterprise software solutions.  </p>"},footnote:{id:"/home/runner/work/blog/blog/content/parts/footnote.md absPath of file >>> MarkdownRemark",html:"<ul>\n<li>rants and writings through personal experience</li>\n</ul>"},site:{siteMetadata:{facebook:{appId:"670156599751120%"}}}},pathContext:{slug:"/capistrano_set_deployed_revision/"}}}});
//# sourceMappingURL=path---capistrano-set-deployed-revision-7d26eea23d216e679f14.js.map