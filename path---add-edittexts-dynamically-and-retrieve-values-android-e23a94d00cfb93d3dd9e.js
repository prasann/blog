webpackJsonp([0xf505e343019e],{848:function(t,e){t.exports={data:{post:{id:"/Users/prasanna/projects/blog-gatsby/content/posts/2011-03-22--add-edittexts-dynamically-and-retrieve-values-android/index.md absPath of file >>> MarkdownRemark",html:'<p>Adding EditText to your Android application is no different from adding any other form elements except for one thing. Retrieving values from them is slightly different and of course nothing impossible. Just a little more bit of coding and thats it.</p>\n<p> <a href="/assets/images/posts/add-edit-text-dynamically-android/full/img1.png" title="Android-EditText"><img src="/assets/images/posts/add-edit-text-dynamically-android/thumbs/img1.png" alt="Android-EditText"></a> </p>\n<p>Following code snippet creates a series of EditTexts and also let you to access its values.  </p>\n<p>import android.app.Activity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.LinearLayout;\nimport android.widget.TableLayout;\nimport android.widget.TableRow;</p>\n<p>import java.util.ArrayList;\nimport java.util.List;</p>\n<p>import static android.view.ViewGroup.LayoutParams.FILL_PARENT;\nimport static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;\nimport static android.widget.LinearLayout.VERTICAL;</p>\n<p>public class Sample extends Activity {\nprivate List<EditText> editTextList = new ArrayList<EditText>();</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    LinearLayout linearLayout = new LinearLayout(this);\n    ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(FILL\\_PARENT, WRAP\\_CONTENT);\n    linearLayout.setLayoutParams(params);\n    linearLayout.setOrientation(VERTICAL);\n\n    int count = 10;\n    linearLayout.addView(tableLayout(count));\n    linearLayout.addView(submitButton());\n    setContentView(linearLayout);\n}\n\nprivate Button submitButton() {\n    Button button = new Button(this);\n    button.setHeight(WRAP\\_CONTENT);\n    button.setText(&quot;Submit&quot;);\n    button.setOnClickListener(submitListener);\n    return button;\n}\n\n// Access the value of the EditText\n\nprivate View.OnClickListener submitListener = new View.OnClickListener() {\n    public void onClick(View view) {\n        StringBuilder stringBuilder = new StringBuilder();\n        for (EditText editText : editTextList) {\n            stringBuilder.append(editText.getText().toString());\n        }\n    }\n};\n\n// Using a TableLayout as it provides you with a neat ordering structure\n\nprivate TableLayout tableLayout(int count) {\n    TableLayout tableLayout = new TableLayout(this);\n    tableLayout.setStretchAllColumns(true);\n    int noOfRows = count / 5;\n    for (int i = 0; i &lt; noOfRows; i++) {\n        int rowId = 5 \\* i;\n        tableLayout.addView(createOneFullRow(rowId));\n    }\n    int individualCells = count % 5;\n    tableLayout.addView(createLeftOverCells(individualCells, count));\n    return tableLayout;\n}\n\nprivate TableRow createLeftOverCells(int individualCells, int count) {\n    TableRow tableRow = new TableRow(this);\n    tableRow.setPadding(0, 10, 0, 0);\n    int rowId = count - individualCells;\n    for (int i = 1; i &lt;= individualCells; i++) {\n        tableRow.addView(editText(String.valueOf(rowId + i)));\n    }\n    return tableRow;\n}\n\nprivate TableRow createOneFullRow(int rowId) {\n    TableRow tableRow = new TableRow(this);\n    tableRow.setPadding(0, 10, 0, 0);\n    for (int i = 1; i &lt;= 5; i++) {\n        tableRow.addView(editText(String.valueOf(rowId + i)));\n    }\n    return tableRow;\n}\n\nprivate EditText editText(String hint) {\n    EditText editText = new EditText(this);\n    editText.setId(Integer.valueOf(hint));\n    editText.setHint(hint);\n    editTextList.add(editText);\n    return editText;\n}</code></pre>\n      </div>\n<p>}</p>',htmlAst:{type:"root",children:[{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Adding EditText to your Android application is no different from adding any other form elements except for one thing. Retrieving values from them is slightly different and of course nothing impossible. Just a little more bit of coding and thats it."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:" "},{type:"element",tagName:"a",properties:{href:"/assets/images/posts/add-edit-text-dynamically-android/full/img1.png",title:"Android-EditText"},children:[{type:"element",tagName:"img",properties:{src:"/assets/images/posts/add-edit-text-dynamically-android/thumbs/img1.png",alt:"Android-EditText"},children:[]}]},{type:"text",value:" "}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Following code snippet creates a series of EditTexts and also let you to access its values.  "}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"import android.app.Activity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.LinearLayout;\nimport android.widget.TableLayout;\nimport android.widget.TableRow;"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"import java.util.ArrayList;\nimport java.util.List;"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"import static android.view.ViewGroup.LayoutParams.FILL_PARENT;\nimport static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;\nimport static android.widget.LinearLayout.VERTICAL;"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"public class Sample extends Activity {\nprivate List"},{type:"element",tagName:"edittext",properties:{},children:[{type:"text",value:" editTextList = new ArrayList"},{type:"element",tagName:"edittext",properties:{},children:[{type:"text",value:"();"}]}]}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"text"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-text"]},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:'@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    LinearLayout linearLayout = new LinearLayout(this);\n    ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(FILL\\_PARENT, WRAP\\_CONTENT);\n    linearLayout.setLayoutParams(params);\n    linearLayout.setOrientation(VERTICAL);\n\n    int count = 10;\n    linearLayout.addView(tableLayout(count));\n    linearLayout.addView(submitButton());\n    setContentView(linearLayout);\n}\n\nprivate Button submitButton() {\n    Button button = new Button(this);\n    button.setHeight(WRAP\\_CONTENT);\n    button.setText("Submit");\n    button.setOnClickListener(submitListener);\n    return button;\n}\n\n// Access the value of the EditText\n\nprivate View.OnClickListener submitListener = new View.OnClickListener() {\n    public void onClick(View view) {\n        StringBuilder stringBuilder = new StringBuilder();\n        for (EditText editText : editTextList) {\n            stringBuilder.append(editText.getText().toString());\n        }\n    }\n};\n\n// Using a TableLayout as it provides you with a neat ordering structure\n\nprivate TableLayout tableLayout(int count) {\n    TableLayout tableLayout = new TableLayout(this);\n    tableLayout.setStretchAllColumns(true);\n    int noOfRows = count / 5;\n    for (int i = 0; i < noOfRows; i++) {\n        int rowId = 5 \\* i;\n        tableLayout.addView(createOneFullRow(rowId));\n    }\n    int individualCells = count % 5;\n    tableLayout.addView(createLeftOverCells(individualCells, count));\n    return tableLayout;\n}\n\nprivate TableRow createLeftOverCells(int individualCells, int count) {\n    TableRow tableRow = new TableRow(this);\n    tableRow.setPadding(0, 10, 0, 0);\n    int rowId = count - individualCells;\n    for (int i = 1; i <= individualCells; i++) {\n        tableRow.addView(editText(String.valueOf(rowId + i)));\n    }\n    return tableRow;\n}\n\nprivate TableRow createOneFullRow(int rowId) {\n    TableRow tableRow = new TableRow(this);\n    tableRow.setPadding(0, 10, 0, 0);\n    for (int i = 1; i <= 5; i++) {\n        tableRow.addView(editText(String.valueOf(rowId + i)));\n    }\n    return tableRow;\n}\n\nprivate EditText editText(String hint) {\n    EditText editText = new EditText(this);\n    editText.setId(Integer.valueOf(hint));\n    editText.setHint(hint);\n    editTextList.add(editText);\n    return editText;\n}'}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"}"}]}],data:{quirksMode:!1}},fields:{slug:"/add-edittexts-dynamically-and-retrieve-values-android/",prefix:"2011-03-22"},frontmatter:{title:"Add EditText(s) dynamically and retrieve values - Android",subTitle:"Adding multiple edit text boxes to the android application dynamically through code and controlling them.",cover:null}},author:{id:"/Users/prasanna/projects/blog-gatsby/content/parts/author.md absPath of file >>> MarkdownRemark",html:"<p><strong>Prasanna</strong> is a full stack web developer, loves to build user interfaces with Javascript. Considers himself as a geek, quick learner and a team player ðŸ˜ƒ </p>"},footnote:{id:"/Users/prasanna/projects/blog-gatsby/content/parts/footnote.md absPath of file >>> MarkdownRemark",html:"<ul>\n<li>rants and writings through personal experience</li>\n</ul>"},site:{siteMetadata:{facebook:{appId:"670156599751120"}}}},pathContext:{slug:"/add-edittexts-dynamically-and-retrieve-values-android/"}}}});
//# sourceMappingURL=path---add-edittexts-dynamically-and-retrieve-values-android-e23a94d00cfb93d3dd9e.js.map