{"version":3,"sources":["webpack:///path---use-flyway-with-leiningen-1f446e6270949d7be28a.js","webpack:///./.cache/json/use-flyway-with-leiningen.json"],"names":["webpackJsonp","901","module","exports","data","post","id","html","htmlAst","type","children","tagName","properties","href","value","className","dataLanguage","quirksMode","fields","slug","prefix","frontmatter","title","subTitle","cover","author","footnote","site","siteMetadata","facebook","appId","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,GAAA,uIAAAC,KAAA,yxEAAi6EC,SAAwCC,KAAA,OAAAC,WAA2BD,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,UAAAE,QAAA,IAAAC,YAA6CC,KAAA,0BAAgCH,WAAcD,KAAA,OAAAK,MAAA,gBAAsCL,KAAA,OAAAK,MAAA,yIAA+JL,KAAA,UAAAE,QAAA,IAAAC,YAA6CC,KAAA,4CAAkDH,WAAcD,KAAA,OAAAK,MAAA,oBAA0CL,KAAA,OAAAK,MAAA,UAAgCL,KAAA,UAAAE,QAAA,IAAAC,YAA6CC,KAAA,wCAA8CH,WAAcD,KAAA,OAAAK,MAAA,WAAiCL,KAAA,OAAAK,MAAA,mBAAyCL,KAAA,OAAAK,MAAA,OAA6BL,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAK,MAAA,8HAAoJL,KAAA,UAAAE,QAAA,IAAAC,YAA6CC,KAAA,yBAA+BH,WAAcD,KAAA,OAAAK,MAAA,aAAmCL,KAAA,OAAAK,MAAA,uIAA6JL,KAAA,OAAAK,MAAA,OAA6BL,KAAA,UAAAE,QAAA,KAAAC,cAA+CF,WAAcD,KAAA,OAAAK,MAAA,mCAAyDL,KAAA,OAAAK,MAAA,OAA6BL,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAK,MAAA,4DAAkFL,KAAA,OAAAK,MAAA,OAA6BL,KAAA,UAAAE,QAAA,KAAAC,cAA+CF,WAAcD,KAAA,OAAAK,MAAA,0CAAgEL,KAAA,OAAAK,MAAA,OAA6BL,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAK,MAAA,eAAqCL,KAAA,UAAAE,QAAA,IAAAC,YAA6CC,KAAA,4CAAkDH,WAAcD,KAAA,OAAAK,MAAA,gBAAsCL,KAAA,OAAAK,MAAA,gJAAsKL,KAAA,OAAAK,MAAA,OAA6BL,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAK,MAAA,2KAAiML,KAAA,OAAAK,MAAA,OAA6BL,KAAA,UAAAE,QAAA,KAAAC,cAA+CF,WAAcD,KAAA,OAAAK,MAAA,+CAAqEL,KAAA,OAAAK,MAAA,OAA6BL,KAAA,UAAAE,QAAA,IAAAC,cAA8CF,WAAcD,KAAA,OAAAK,MAAA,saAA4bL,KAAA,OAAAK,MAAA,OAA6BL,KAAA,UAAAE,QAAA,MAAAC,YAA+CG,WAAA,oBAAAC,aAAA,QAAuDN,WAAcD,KAAA,OAAAK,MAAA,aAAmCL,KAAA,UAAAE,QAAA,MAAAC,YAA+CG,WAAA,kBAA8BL,WAAcD,KAAA,UAAAE,QAAA,OAAAC,YAAgDG,WAAA,kBAA8BL,WAAcD,KAAA,OAAAK,MAAA,4XAA8aL,KAAA,OAAAK,MAAA,eAAmCV,MAAUa,YAAA,IAAoBC,QAAWC,KAAA,8BAAAC,OAAA,cAA2DC,aAAgBC,MAAA,oCAAAC,SAAA,6JAAAC,MAAA,OAAkOC,QAAWnB,GAAA,kGAAAC,KAAA,oLAAiSmB,UAAapB,GAAA,oGAAAC,KAAA,wEAAuLoB,MAASC,cAAgBC,UAAYC,MAAA,sBAA6BC,aAAgBZ,KAAA","file":"path---use-flyway-with-leiningen-1f446e6270949d7be28a.js","sourcesContent":["webpackJsonp([126045060590641],{\n\n/***/ 901:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/Users/prasanna/projects/blog-gatsby/content/posts/2017-07-16--use flyway with leiningen/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><a href=\\\"https://leiningen.org/\\\">Leiningen</a> is the easiest way to start with clojure project automation. The project under discussion is a webservices written in clojure with <a href=\\\"https://github.com/metosin/compojure-api\\\">compojure-api</a> and <a href=\\\"https://github.com/ring-clojure/ring\\\">ring</a> middleware.</p>\\n<p>When it came to Database migrations, I didn’t find anything straightforward amongst the lein plugins. So, decided to use <a href=\\\"https://flywaydb.org/\\\">flyway</a>. I have worked with flyway in the past with Java applications. But, this is the first time with clojure, leiningen combination.</p>\\n<h3>Migration utility in clojure</h3>\\n<p>Here is the small migration helper written in Clojure</p>\\n<h3>Running migration during deployment</h3>\\n<p>I’m using <a href=\\\"https://github.com/weavejester/lein-ring\\\">lein-ring</a> plugin, this provided an option to execute function before the handler starts. So, I wired app.migrate to the init block of the handler.</p>\\n<p>This helps to run migration everytime before the application deploys. Ofcourse, flyway will take care of what migrations need to run based on the migration version.</p>\\n<h3>Running migrations for local development</h3>\\n<p>The above method works perfectly for the application deployment scenarios. However, in local it will be better to execute​ ​migration and clean databases as and when required, rather than re-deploying the application. lein-exec plugin offers​ ​a way to create and execute clojure code from project.clj files. With the above-mentioned migration present, all ​I​​ ha​ve to do is to create some aliases as shown below.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">        :aliases { \\n            &quot;db-clean&quot;   \\\\[&quot;exec&quot; &quot;-ep&quot; &quot;(use &#39;deal-picker.migration) (clean)&quot;\\\\]\\n            &quot;db-migrate&quot; \\\\[&quot;exec&quot; &quot;-ep&quot; &quot;(use &#39;deal-picker.migration) (migrate)&quot;\\\\]\\n            &quot;db-info&quot;    \\\\[&quot;exec&quot; &quot;-ep&quot; &quot;(use &#39;deal-picker.migration) (info)&quot;\\\\]\\n            &quot;db-reset&quot;   \\\\[&quot;exec&quot; &quot;-ep&quot; &quot;(use &#39;deal-picker.migration) (reset)&quot;\\\\]\\n        }</code></pre>\\n      </div>\",\"htmlAst\":{\"type\":\"root\",\"children\":[{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://leiningen.org/\"},\"children\":[{\"type\":\"text\",\"value\":\"Leiningen\"}]},{\"type\":\"text\",\"value\":\" is the easiest way to start with clojure project automation. The project under discussion is a webservices written in clojure with \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://github.com/metosin/compojure-api\"},\"children\":[{\"type\":\"text\",\"value\":\"compojure-api\"}]},{\"type\":\"text\",\"value\":\" and \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://github.com/ring-clojure/ring\"},\"children\":[{\"type\":\"text\",\"value\":\"ring\"}]},{\"type\":\"text\",\"value\":\" middleware.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"When it came to Database migrations, I didn’t find anything straightforward amongst the lein plugins. So, decided to use \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://flywaydb.org/\"},\"children\":[{\"type\":\"text\",\"value\":\"flyway\"}]},{\"type\":\"text\",\"value\":\". I have worked with flyway in the past with Java applications. But, this is the first time with clojure, leiningen combination.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h3\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Migration utility in clojure\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Here is the small migration helper written in Clojure\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h3\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Running migration during deployment\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"I’m using \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://github.com/weavejester/lein-ring\"},\"children\":[{\"type\":\"text\",\"value\":\"lein-ring\"}]},{\"type\":\"text\",\"value\":\" plugin, this provided an option to execute function before the handler starts. So, I wired app.migrate to the init block of the handler.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"This helps to run migration everytime before the application deploys. Ofcourse, flyway will take care of what migrations need to run based on the migration version.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h3\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Running migrations for local development\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"The above method works perfectly for the application deployment scenarios. However, in local it will be better to execute​ ​migration and clean databases as and when required, rather than re-deploying the application. lein-exec plugin offers​ ​a way to create and execute clojure code from project.clj files. With the above-mentioned migration present, all ​I​​ ha​ve to do is to create some aliases as shown below.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"],\"dataLanguage\":\"text\"},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"        :aliases { \\n            \\\"db-clean\\\"   \\\\[\\\"exec\\\" \\\"-ep\\\" \\\"(use 'deal-picker.migration) (clean)\\\"\\\\]\\n            \\\"db-migrate\\\" \\\\[\\\"exec\\\" \\\"-ep\\\" \\\"(use 'deal-picker.migration) (migrate)\\\"\\\\]\\n            \\\"db-info\\\"    \\\\[\\\"exec\\\" \\\"-ep\\\" \\\"(use 'deal-picker.migration) (info)\\\"\\\\]\\n            \\\"db-reset\\\"   \\\\[\\\"exec\\\" \\\"-ep\\\" \\\"(use 'deal-picker.migration) (reset)\\\"\\\\]\\n        }\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]}],\"data\":{\"quirksMode\":false}},\"fields\":{\"slug\":\"/use flyway with leiningen/\",\"prefix\":\"2017-07-16\"},\"frontmatter\":{\"title\":\"Flyway migrations in lein clojure\",\"subTitle\":\"Flyway is a popular Java based database migration tool. This post describes about integrating flyway seamlessly with lein compojure ring stack in clojure.\",\"cover\":null}},\"author\":{\"id\":\"/Users/prasanna/projects/blog-gatsby/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Prasanna</strong> is a full stack web developer, loves to build user interfaces with Javascript. Considers himself as a geek, quick learner and a team player 😃 </p>\"},\"footnote\":{\"id\":\"/Users/prasanna/projects/blog-gatsby/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"<ul>\\n<li>rants and writings through personal experience</li>\\n</ul>\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"670156599751120\"}}}},\"pathContext\":{\"slug\":\"/use flyway with leiningen/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---use-flyway-with-leiningen-1f446e6270949d7be28a.js","module.exports = {\"data\":{\"post\":{\"id\":\"/Users/prasanna/projects/blog-gatsby/content/posts/2017-07-16--use flyway with leiningen/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><a href=\\\"https://leiningen.org/\\\">Leiningen</a> is the easiest way to start with clojure project automation. The project under discussion is a webservices written in clojure with <a href=\\\"https://github.com/metosin/compojure-api\\\">compojure-api</a> and <a href=\\\"https://github.com/ring-clojure/ring\\\">ring</a> middleware.</p>\\n<p>When it came to Database migrations, I didn’t find anything straightforward amongst the lein plugins. So, decided to use <a href=\\\"https://flywaydb.org/\\\">flyway</a>. I have worked with flyway in the past with Java applications. But, this is the first time with clojure, leiningen combination.</p>\\n<h3>Migration utility in clojure</h3>\\n<p>Here is the small migration helper written in Clojure</p>\\n<h3>Running migration during deployment</h3>\\n<p>I’m using <a href=\\\"https://github.com/weavejester/lein-ring\\\">lein-ring</a> plugin, this provided an option to execute function before the handler starts. So, I wired app.migrate to the init block of the handler.</p>\\n<p>This helps to run migration everytime before the application deploys. Ofcourse, flyway will take care of what migrations need to run based on the migration version.</p>\\n<h3>Running migrations for local development</h3>\\n<p>The above method works perfectly for the application deployment scenarios. However, in local it will be better to execute​ ​migration and clean databases as and when required, rather than re-deploying the application. lein-exec plugin offers​ ​a way to create and execute clojure code from project.clj files. With the above-mentioned migration present, all ​I​​ ha​ve to do is to create some aliases as shown below.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">        :aliases { \\n            &quot;db-clean&quot;   \\\\[&quot;exec&quot; &quot;-ep&quot; &quot;(use &#39;deal-picker.migration) (clean)&quot;\\\\]\\n            &quot;db-migrate&quot; \\\\[&quot;exec&quot; &quot;-ep&quot; &quot;(use &#39;deal-picker.migration) (migrate)&quot;\\\\]\\n            &quot;db-info&quot;    \\\\[&quot;exec&quot; &quot;-ep&quot; &quot;(use &#39;deal-picker.migration) (info)&quot;\\\\]\\n            &quot;db-reset&quot;   \\\\[&quot;exec&quot; &quot;-ep&quot; &quot;(use &#39;deal-picker.migration) (reset)&quot;\\\\]\\n        }</code></pre>\\n      </div>\",\"htmlAst\":{\"type\":\"root\",\"children\":[{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://leiningen.org/\"},\"children\":[{\"type\":\"text\",\"value\":\"Leiningen\"}]},{\"type\":\"text\",\"value\":\" is the easiest way to start with clojure project automation. The project under discussion is a webservices written in clojure with \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://github.com/metosin/compojure-api\"},\"children\":[{\"type\":\"text\",\"value\":\"compojure-api\"}]},{\"type\":\"text\",\"value\":\" and \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://github.com/ring-clojure/ring\"},\"children\":[{\"type\":\"text\",\"value\":\"ring\"}]},{\"type\":\"text\",\"value\":\" middleware.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"When it came to Database migrations, I didn’t find anything straightforward amongst the lein plugins. So, decided to use \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://flywaydb.org/\"},\"children\":[{\"type\":\"text\",\"value\":\"flyway\"}]},{\"type\":\"text\",\"value\":\". I have worked with flyway in the past with Java applications. But, this is the first time with clojure, leiningen combination.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h3\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Migration utility in clojure\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Here is the small migration helper written in Clojure\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h3\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Running migration during deployment\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"I’m using \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://github.com/weavejester/lein-ring\"},\"children\":[{\"type\":\"text\",\"value\":\"lein-ring\"}]},{\"type\":\"text\",\"value\":\" plugin, this provided an option to execute function before the handler starts. So, I wired app.migrate to the init block of the handler.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"This helps to run migration everytime before the application deploys. Ofcourse, flyway will take care of what migrations need to run based on the migration version.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h3\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Running migrations for local development\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"The above method works perfectly for the application deployment scenarios. However, in local it will be better to execute​ ​migration and clean databases as and when required, rather than re-deploying the application. lein-exec plugin offers​ ​a way to create and execute clojure code from project.clj files. With the above-mentioned migration present, all ​I​​ ha​ve to do is to create some aliases as shown below.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"],\"dataLanguage\":\"text\"},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"        :aliases { \\n            \\\"db-clean\\\"   \\\\[\\\"exec\\\" \\\"-ep\\\" \\\"(use 'deal-picker.migration) (clean)\\\"\\\\]\\n            \\\"db-migrate\\\" \\\\[\\\"exec\\\" \\\"-ep\\\" \\\"(use 'deal-picker.migration) (migrate)\\\"\\\\]\\n            \\\"db-info\\\"    \\\\[\\\"exec\\\" \\\"-ep\\\" \\\"(use 'deal-picker.migration) (info)\\\"\\\\]\\n            \\\"db-reset\\\"   \\\\[\\\"exec\\\" \\\"-ep\\\" \\\"(use 'deal-picker.migration) (reset)\\\"\\\\]\\n        }\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]}],\"data\":{\"quirksMode\":false}},\"fields\":{\"slug\":\"/use flyway with leiningen/\",\"prefix\":\"2017-07-16\"},\"frontmatter\":{\"title\":\"Flyway migrations in lein clojure\",\"subTitle\":\"Flyway is a popular Java based database migration tool. This post describes about integrating flyway seamlessly with lein compojure ring stack in clojure.\",\"cover\":null}},\"author\":{\"id\":\"/Users/prasanna/projects/blog-gatsby/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Prasanna</strong> is a full stack web developer, loves to build user interfaces with Javascript. Considers himself as a geek, quick learner and a team player 😃 </p>\"},\"footnote\":{\"id\":\"/Users/prasanna/projects/blog-gatsby/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"<ul>\\n<li>rants and writings through personal experience</li>\\n</ul>\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"670156599751120\"}}}},\"pathContext\":{\"slug\":\"/use flyway with leiningen/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/use-flyway-with-leiningen.json\n// module id = 901\n// module chunks = 126045060590641"],"sourceRoot":""}