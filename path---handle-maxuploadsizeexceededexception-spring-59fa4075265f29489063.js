webpackJsonp([0xd8e37a19514f],{874:function(e,t){e.exports={data:{post:{id:"/Users/prasanna/projects/blog/content/posts/2012-06-24--handle-maxuploadsizeexceededexception-spring/index.md absPath of file >>> MarkdownRemark",html:'<p>I was doing a AJAX file upload using jQuery and Spring 3. Spring provides a way to limit the file being uploaded and this can be configured while creating the multipart bean by specifying the maxUploadSize parameter.</p>\n<p>So whenever an user tries to upload a file with size size greater than that of the specified one then Spring will throw <em>‘MaxUploadSizeExceededException’</em> exception and returns back. The problem for me is that i was doing the file upload using AJAX so i wanted a custom error to be thrown rather than the Spring’s default error.</p>\n<p>And also because of this exception the control will not even reach your specified controller so there is no chance to catch it in your Controller. After some lookup i found this simple fix for it.</p>\n<p>FileUploadController: Controller which will handle the file upload request.</p>\n<p><em><strong>Make this FileUploadController to implement HandlerExceptionResolver. This will force you to define resolveException() method.</strong></em></p>\n<p>  @ResponseBody\npublic ModelAndView resolveException(HttpServletRequest httpServletRequest,\nHttpServletResponse httpServletResponse, Object o, Exception e) {\nif (e instanceof MaxUploadSizeExceededException) {\nModelAndView modelAndView = new ModelAndView(“inline-error”);\nmodelAndView.addObject(“error”, “Error: Your file size is too large to upload.\nPlease upload a file of size &#x3C; 5MB and continue.”);\nreturn modelAndView;\n}\ne.printStackTrace();\nreturn new ModelAndView(“500”);\n}</p>\n<p>** How to show the error on the same page:**</p>\n<p>The call to the controller is from a jQuery ajax method. But the problem here is that even with this approach your jQuery POST method is going to receive a HTTP_OK message from the controller. Hence if you are waiting at the error callback then you have no chance of catching this error.</p>\n<p>So what i have done here is to return inline-error view back as the response. On the success callback of the jQuery i check for the presence of the error_div in the response and display the field in the page. Else show the success message.</p>\n<p><em>inline-error.jsp</em></p>\n<div class="error" id="error\\_div">${error}</div>\n<p><em>PS: This is definitely not the cleanest approach, but this solved my problem :)</em></p>',htmlAst:{type:"root",children:[{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"I was doing a AJAX file upload using jQuery and Spring 3. Spring provides a way to limit the file being uploaded and this can be configured while creating the multipart bean by specifying the maxUploadSize parameter."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"So whenever an user tries to upload a file with size size greater than that of the specified one then Spring will throw "},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"‘MaxUploadSizeExceededException’"}]},{type:"text",value:" exception and returns back. The problem for me is that i was doing the file upload using AJAX so i wanted a custom error to be thrown rather than the Spring’s default error."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"And also because of this exception the control will not even reach your specified controller so there is no chance to catch it in your Controller. After some lookup i found this simple fix for it."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"FileUploadController: Controller which will handle the file upload request."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"em",properties:{},children:[{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"Make this FileUploadController to implement HandlerExceptionResolver. This will force you to define resolveException() method."}]}]}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"  @ResponseBody\npublic ModelAndView resolveException(HttpServletRequest httpServletRequest,\nHttpServletResponse httpServletResponse, Object o, Exception e) {\nif (e instanceof MaxUploadSizeExceededException) {\nModelAndView modelAndView = new ModelAndView(“inline-error”);\nmodelAndView.addObject(“error”, “Error: Your file size is too large to upload.\nPlease upload a file of size < 5MB and continue.”);\nreturn modelAndView;\n}\ne.printStackTrace();\nreturn new ModelAndView(“500”);\n}"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"** How to show the error on the same page:**"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"The call to the controller is from a jQuery ajax method. But the problem here is that even with this approach your jQuery POST method is going to receive a HTTP_OK message from the controller. Hence if you are waiting at the error callback then you have no chance of catching this error."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"So what i have done here is to return inline-error view back as the response. On the success callback of the jQuery i check for the presence of the error_div in the response and display the field in the page. Else show the success message."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"inline-error.jsp"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["error"],id:"error\\_div"},children:[{type:"text",value:"${error}"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"PS: This is definitely not the cleanest approach, but this solved my problem :)"}]}]}],data:{quirksMode:!1}},fields:{slug:"/handle-maxuploadsizeexceededexception-spring/",prefix:"2012-06-24"},frontmatter:{title:"Handle MaxUpload SizeExceededException in Spring",subTitle:"Handling MaxUploadExceedException in Ajax call with Spring controllers. This exception occurs when the file size greate than what is expected is been uploaded by the user.",draft:null}},author:{id:"/Users/prasanna/projects/blog/content/parts/author.md absPath of file >>> MarkdownRemark",html:"<p><strong>Prasanna</strong> is a full stack web developer, with exposure to various programming languages.\nUses mostly Java, Javascript these days and got 11+ years of architecting and coding enterprise software solutions.   </p>"},footnote:{id:"/Users/prasanna/projects/blog/content/parts/footnote.md absPath of file >>> MarkdownRemark",html:"<ul>\n<li>rants and writings through personal experience</li>\n</ul>"},site:{siteMetadata:{facebook:{appId:"670156599751120%"}}}},pathContext:{slug:"/handle-maxuploadsizeexceededexception-spring/"}}}});
//# sourceMappingURL=path---handle-maxuploadsizeexceededexception-spring-59fa4075265f29489063.js.map