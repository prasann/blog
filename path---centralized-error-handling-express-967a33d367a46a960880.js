webpackJsonp([0x876b449c09a9],{861:function(e,t){e.exports={data:{post:{id:"/home/runner/work/blog/blog/content/posts/2020-04-10--centralized-error-handling-express/index.md absPath of file >>> MarkdownRemark",html:'<p><em><strong>Note: All my examples are in typescript and there are million other ways to achieve similar result, this is just my way of doing things.</strong></em></p>\n<p>If you are looking to start a new application in express, go over to the express site, use <a href="https://expressjs.com/en/starter/generator.html">express-generator</a> to create an application. </p>\n<h2>Error handling</h2>\n<p>By default, any errors that are thrown within your application, will be sent as a 500 response code, along with the error stack trace in the body. This was inconvenient for me since,</p>\n<ul>\n<li>I don’t want the end-user to know the system stack trace.</li>\n<li>I want to use exceptions for errors like <code class="language-text">BadRequest</code> <code class="language-text">AuthExceptions</code> etc.</li>\n</ul>\n<p>So, i decided to tweak the default behaviour and take control of error handling. If your use case is similar, then proceed with further steps.</p>\n<h3>Custom error handler</h3>\n<p>Create your own custom ErrorHandler class (<code class="language-text">error_handler.ts</code>), this will extend the node’s <a href="https://nodejs.org/api/errors.html#errors_class_error">Error</a> class.</p>\n<div class="gatsby-highlight" data-language="typescript">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token comment">//error_handler.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>\n    statusCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>statusCode <span class="token operator">=</span> statusCode<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Now in your application you can invoke this custom error handler by calling,</p>\n<div class="gatsby-highlight" data-language="typescript">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">new</span> <span class="token class-name">AppError</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">\'Unable to find the resource\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//or</span>\n<span class="token keyword">new</span> <span class="token class-name">AppError</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> <span class="token string">\'You are not authorized to perform this action\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3>Wiring error interceptor into express application</h3>\n<p>Once you start throwing exceptions within your application, next step is to convert those errors into a meaningful response for the end-user. Express app provides a way to hook up a custom error\nhandler into your application. A middleware that takes in 4 parameters is your way to add your custom error handler.</p>\n<p>Let’s add the custom error handler function in the same <code class="language-text">error_handler.ts</code> class and export. This generic function will parse the thrown error and constructs appropriate response.</p>\n<div class="gatsby-highlight" data-language="typescript">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token comment">//error_handler.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">customErrorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> statusCode<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> err<span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>error<span class="token operator">:</span> <span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<div class="gatsby-highlight" data-language="typescript">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">\'express\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> customErrorHandler <span class="token keyword">from</span> <span class="token string">\'error_handler\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Other middlewares, routes... </span>\n\n<span class="token comment">// Adding your custom error handler.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">customErrorHandler</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Now, whenever any error that is thrown in the application will be caught by this error handler. This will in turn respond back with appropriate status code.</p>\n<h3>Dealing with unknown errors</h3>\n<p>As you can see, the <code class="language-text">customErrorHandler</code> has a limitation of handling only the errors that are of type <code class="language-text">AppError</code> since it expects <code class="language-text">statusCode</code> to be present in the error.\nHowever, there will be <code class="language-text">RuntimeExceptions</code> that will occur in the application. It’s kind of hard to catch all these sort of errors in the application and re-throw them as custom errors.</p>\n<p>So, we will improve our <code class="language-text">customErrorHandler</code> to handle such <code class="language-text">RuntimeExceptions</code>.</p>\n<div class="gatsby-highlight" data-language="typescript">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token comment">//error_handler.ts</span>\n<span class="token keyword">const</span> <span class="token function-variable function">handleKnownExceptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">//log it</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> statusCode<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> err<span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>error<span class="token operator">:</span> <span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">handleUnknownExceptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">//log it</span>\n    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> error<span class="token operator">:</span> <span class="token punctuation">{</span>message<span class="token operator">:</span> <span class="token string">\'Something went wrong.\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">customErrorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    err <span class="token keyword">instanceof</span> <span class="token class-name">AppError</span> <span class="token operator">?</span> <span class="token function">handleKnownExceptions</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">handleUnknownExceptions</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Now, we introduced one more way of handling errors. If the caught error is not that of ours (<code class="language-text">AppError</code>) then we respond back with a 500 response.\nWe don’t want our end user to know about the system internals and hence respond with a static message.</p>\n<h3>Dealing with asynchronous routes</h3>\n<p>This centralized error handling will not work for the errors that are thrown in the <code class="language-text">await</code> methods i.e, any error that are thrown in an async block will not reach our <code class="language-text">customErrorHandler</code>.\nThis is a limitation with respect to express 4.x. </p>\n<p>As a workaround, you have to make the routes to be synchronous. Instead of changing all the routes to synchronous blocks i used this\n<a href="https://github.com/Abazhenov/express-async-handler">middleware</a> to achieve a similar effect. Post wrapping my routes with this middleware, all the errors in async block will then reach our  <code class="language-text">customErrorHandler</code></p>\n<p>Here is the <a href="https://gist.github.com/prasann/b6ad07b3962b6ea2953fef027df5d10b">gist</a> to the final <code class="language-text">error_handler.ts</code></p>',htmlAst:{type:"root",children:[{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"em",properties:{},children:[{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"Note: All my examples are in typescript and there are million other ways to achieve similar result, this is just my way of doing things."}]}]}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"If you are looking to start a new application in express, go over to the express site, use "},{type:"element",tagName:"a",properties:{href:"https://expressjs.com/en/starter/generator.html"},children:[{type:"text",value:"express-generator"}]},{type:"text",value:" to create an application. "}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Error handling"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"By default, any errors that are thrown within your application, will be sent as a 500 response code, along with the error stack trace in the body. This was inconvenient for me since,"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"I don’t want the end-user to know the system stack trace."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"I want to use exceptions for errors like "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"BadRequest"}]},{type:"text",value:" "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"AuthExceptions"}]},{type:"text",value:" etc."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"So, i decided to tweak the default behaviour and take control of error handling. If your use case is similar, then proceed with further steps."}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Custom error handler"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Create your own custom ErrorHandler class ("},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"error_handler.ts"}]},{type:"text",value:"), this will extend the node’s "},{type:"element",tagName:"a",properties:{href:"https://nodejs.org/api/errors.html#errors_class_error"},children:[{type:"text",value:"Error"}]},{type:"text",value:" class."}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"typescript"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-typescript"]},children:[{type:"element",tagName:"code",properties:{className:["language-typescript"]},children:[{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"//error_handler.ts"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"export"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"class"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","class-name"]},children:[{type:"text",value:"AppError"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"extends"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","class-name"]},children:[{type:"text",value:"Error"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n    statusCode"},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","builtin"]},children:[{type:"text",value:"number"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n    message"},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","builtin"]},children:[{type:"text",value:"string"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n\n    "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"constructor"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"statusCode"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" message"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n        "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"super"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"message"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n        "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"this"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"text",value:"statusCode "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" statusCode"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n        "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"this"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"text",value:"message "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" message"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n    "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Now in your application you can invoke this custom error handler by calling,"}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"typescript"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-typescript"]},children:[{type:"element",tagName:"code",properties:{className:["language-typescript"]},children:[{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"new"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","class-name"]},children:[{type:"text",value:"AppError"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"404"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Unable to find the resource'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"//or"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"new"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","class-name"]},children:[{type:"text",value:"AppError"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"403"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'You are not authorized to perform this action'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Wiring error interceptor into express application"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Once you start throwing exceptions within your application, next step is to convert those errors into a meaningful response for the end-user. Express app provides a way to hook up a custom error\nhandler into your application. A middleware that takes in 4 parameters is your way to add your custom error handler."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Let’s add the custom error handler function in the same "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"error_handler.ts"}]},{type:"text",value:" class and export. This generic function will parse the thrown error and constructs appropriate response."}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"typescript"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-typescript"]},children:[{type:"element",tagName:"code",properties:{className:["language-typescript"]},children:[{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"//error_handler.ts"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"export"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"const"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","function-variable","function"]},children:[{type:"text",value:"customErrorHandler"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"err"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" res"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"=>"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n    "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"const"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:" statusCode"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" message "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" err"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n    res"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"status"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"statusCode"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"json"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"error"},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"message"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"typescript"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-typescript"]},children:[{type:"element",tagName:"code",properties:{className:["language-typescript"]},children:[{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"import"}]},{type:"text",value:" express "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"from"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'express'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"import"}]},{type:"text",value:" customErrorHandler "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"from"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'error_handler'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"const"}]},{type:"text",value:" app "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"express"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n\n"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// Other middlewares, routes... "}]},{type:"text",value:"\n\n"},{type:"element",tagName:"span",properties:{className:["token","comment"]
},children:[{type:"text",value:"// Adding your custom error handler."}]},{type:"text",value:"\napp"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"use"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"err"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" req"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" res"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" next"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"=>"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n  "},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"customErrorHandler"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"err"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" res"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Now, whenever any error that is thrown in the application will be caught by this error handler. This will in turn respond back with appropriate status code."}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Dealing with unknown errors"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"As you can see, the "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"customErrorHandler"}]},{type:"text",value:" has a limitation of handling only the errors that are of type "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"AppError"}]},{type:"text",value:" since it expects "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"statusCode"}]},{type:"text",value:" to be present in the error.\nHowever, there will be "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"RuntimeExceptions"}]},{type:"text",value:" that will occur in the application. It’s kind of hard to catch all these sort of errors in the application and re-throw them as custom errors."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"So, we will improve our "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"customErrorHandler"}]},{type:"text",value:" to handle such "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"RuntimeExceptions"}]},{type:"text",value:"."}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"typescript"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-typescript"]},children:[{type:"element",tagName:"code",properties:{className:["language-typescript"]},children:[{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"//error_handler.ts"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"const"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","function-variable","function"]},children:[{type:"text",value:"handleKnownExceptions"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"err"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" res"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"=>"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n    "},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"//log it"}]},{type:"text",value:"\n    "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"const"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:" statusCode"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" message "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" err"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n    res"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"status"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"statusCode"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"json"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"error"},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"message"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n\n"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"const"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","function-variable","function"]},children:[{type:"text",value:"handleUnknownExceptions"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"err"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" res"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"=>"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n    "},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"//log it"}]},{type:"text",value:"\n    res"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"status"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","number"]},children:[{type:"text",value:"500"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"."}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"json"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:" error"},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"message"},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Something went wrong.'"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n\n"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"export"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"const"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","function-variable","function"]},children:[{type:"text",value:"customErrorHandler"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"err"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" res"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"=>"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n    err "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"instanceof"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","class-name"]},children:[{type:"text",value:"AppError"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"?"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"handleKnownExceptions"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"err"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" res"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"handleUnknownExceptions"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"err"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" res"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:";"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Now, we introduced one more way of handling errors. If the caught error is not that of ours ("},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"AppError"}]},{type:"text",value:") then we respond back with a 500 response.\nWe don’t want our end user to know about the system internals and hence respond with a static message."}]},{type:"text",value:"\n"},{type:"element",tagName:"h3",properties:{},children:[{type:"text",value:"Dealing with asynchronous routes"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"This centralized error handling will not work for the errors that are thrown in the "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"await"}]},{type:"text",value:" methods i.e, any error that are thrown in an async block will not reach our "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"customErrorHandler"}]},{type:"text",value:".\nThis is a limitation with respect to express 4.x. "}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"As a workaround, you have to make the routes to be synchronous. Instead of changing all the routes to synchronous blocks i used this\n"},{type:"element",tagName:"a",properties:{href:"https://github.com/Abazhenov/express-async-handler"},children:[{type:"text",value:"middleware"}]},{type:"text",value:" to achieve a similar effect. Post wrapping my routes with this middleware, all the errors in async block will then reach our  "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"customErrorHandler"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Here is the "},{type:"element",tagName:"a",properties:{href:"https://gist.github.com/prasann/b6ad07b3962b6ea2953fef027df5d10b"},children:[{type:"text",value:"gist"}]},{type:"text",value:" to the final "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"error_handler.ts"}]}]}],data:{quirksMode:!1}},fields:{slug:"/centralized-error-handling-express/",prefix:"2020-04-10"},frontmatter:{title:"Centralized error handling in Express applications.",subTitle:"Writing a custom error handler to handle all the exceptions that are thrown within the express application.",draft:!1}},author:{id:"/home/runner/work/blog/blog/content/parts/author.md absPath of file >>> MarkdownRemark",html:"<p><strong>Prasanna</strong> is a full stack web developer, with exposure to various programming languages.\nUses mostly Java, Javascript these days and got 11+ years of architecting and coding enterprise software solutions.   </p>"},footnote:{id:"/home/runner/work/blog/blog/content/parts/footnote.md absPath of file >>> MarkdownRemark",html:"<ul>\n<li>rants and writings through personal experience</li>\n</ul>"},site:{siteMetadata:{facebook:{appId:"670156599751120%"}}}},pathContext:{slug:"/centralized-error-handling-express/"}}}});
//# sourceMappingURL=path---centralized-error-handling-express-967a33d367a46a960880.js.map